#!/bin/sh
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Jeffrey Hutchins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 

run_cmd() {
    local cmd=$1
    echo "Will run '$cmd'"
    default=y
    echo "Continue? [Y/n]: "
    read answer
    local response=${answer:-$default}
    if [ "$response" == "y" ] || ["$response" == "Y" ]
    then
        $cmd
    else
        echo "Aborting"
    fi
}

start() {
    echo "Are you trying to find that which is lost or fix a change that was made?"
    echo 
    echo "Due to previous activities (thrashing about), you may have lost some work which"
    echo "you would like to find and restore. Alternately, you may have made some changes"
    echo "which you would like to fix. Fixing includes updating, rewording, and deleting"
    echo "or discarding."
    echo
    echo "  1) Fix a change"
    echo "  2) Find what is lost"
    echo
    echo "Choice: "

    read choice

    case $choice in
        1)
            committedp
            ;;
        2)
            lostnfound
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            start
    esac
}

committedp() {
    echo
    echo
    echo "Have you committed?"
    echo
    echo "If you have not yet committed that which you do not want, git does not know"
    echo "anything about what you have done yet, so it is pretty easy to undo what you"
    echo "have done."
    echo
    echo "  1) I am in the middle of a bad merge"
    echo "  2) I am in the middle of a bad rebase"
    echo "  3) Yes, commits were made"
    echo "  4) No, I have not yet committed"
    echo
    echo "Choice: "

    read choice

    case $choice in
        1)
            badmerge
            ;;
        2)
            badrebase
            ;;
        3)
            committed
            ;;
        4)
            uncommitted
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            committedp
    esac
}

uncommitted() {
    echo
    echo
    echo "Discard everything or just some things?"
    echo
    echo "So you have not yet committed, the question is now whether you want to undo"
    echo "everything which you have done since the last commit or just some things, or"
    echo "just save what you have done?"
    echo
    echo "  1) Discard everything"
    echo "  2) Discard some things"
    echo "  3) I want to save my changes"
    echo

    read choice

    case $choice in
        1)
            badmerge
            ;;
        2)
            badrebase
            ;;
        3)
            committed
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            uncommitted
    esac
}

uncommitted_commit() {
    echo
    echo
    echo "How to save uncommitted changes"
    echo
    echo "There are five ways you can save your uncommitted change. I also suggest you"
    echo "read Pro Git (http://git-scm.com/book/) as these are pretty basic git operations."
    echo
    echo "  1) Commit them on the local branch."
    echo "  2) Commit them on another branch, no checkout conflicts."
    echo "  3) Commit them on another branch, conflicts."
    echo "  4) Commit them on a new branch."
    echo "  5) Stash them for a rainy day."

    # TODO: figure out how to add this snark
    #Using git add -p to add/commit only some changes to make multiple commits is left as an exercise for the reader.

    read choice

    case $choice in
        1)
            echo "Enter a commit message: "
            read message
            run_cmd "git commit -am \"$message\""
            ;;
        2)
            echo "Enter a different branch name: "
            read branch
            echo "Enter a commit message: "
            read message
            run_cmd "git checkout $branch && git commit -am \"$message\""
            ;;
        3)
            echo "Enter a different branch name: "
            read branch
            echo "Enter a commit message: "
            read message
            run_cmd "git stash; git checkout $branch; git stash apply"
            echo "Resolve conflicts that exist."
            run_cmd "git commit -am \"$message\"; git stash drop"
            ;;
        4)
            echo "Enter a different branch name: "
            read branch
            echo "Enter a commit message: "
            read message
            run_cmd "git checkout -b $branch; git commit -am \"$message\""
            ;;
        5)
            echo "Enter a stash description: "
            read description
            run_cmd "git stash save \"$description\""
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            uncommitted_commit
    esac
}

uncommitted_everything() {
    echo
    echo
    echo "How to undo all uncommitted changes"
    echo
    echo "So you have not yet committed and you want to undo everything. Well, best"
    echo "practice is for you to stash the changes in case you were mistaken and later"
    echo "decide that you really wanted them after all."
    echo "'git stash save \"description of changes\"'."
    echo "You can revisit those stashes later 'git stash list' and decide whether to"
    echo "'git stash drop' them after some time has past. Please note that untracked and"
    echo "ignored files are not stashed by default. See \"--include-untracked\" and"
    echo "\"--all\" for stash options to handle those two cases."
    echo 
    echo "However, perhaps you are confident (or arrogant) enough to know for sure that"
    echo "you will never ever want the uncommitted changes. If so, you can run"
    echo "'git reset --hard', however please be quite aware that this is almost certainly"
    echo "a completely unrecoverable operation. Any changes which are removed here cannot"
    echo "be restored later. This will not delete untracked or ignored files. Those can be"
    echo "deleted with 'git clean -nd' 'git clean -ndX' respectively, or 'git clean -ndx'"
    echo "for both at once. Well, actually those command do not delete the files. They"
    echo "show what files will be deleted. Replace the \"n\" in \"-nd…\" with \"f\" to"
    echo "actually delete the files. Best practice is to ensure you are not deleting what"
    echo "you should not by looking at the moribund filenames first."
    echo
    echo "  1) I like to be cautious, stash the changes for later"
    echo "  2) I'm filled with hubris, delete these changes for all time" 
    echo "Choice: "

    read choice

    case $choice in
        1)
            echo "Enter a description: "
            read description
            run_cmd "git stash save \"$description\""
            ;;
        2)
            run_cmd "git reset --hard"
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            uncommitted_everything
    esac
}

uncommitted_somethings() {
    echo
    echo
    echo "How to undo some uncommitted changes"
    echo
    echo "So you have not yet committed and you want to undo some things, well"
    echo "'git status' will tell you exactly what you need to do. For example:"
    echo
    echo "+-----------------------------------------------------------------------------+"
    echo "# On branch master"
    echo "# Changes to be committed:"
    echo "#   (use \"git reset HEAD <file>...\" to unstage)"
    echo "#"
    echo "#       new file:   .gitignore"
    echo "#"
    echo "# Changes not staged for commit:"
    echo "#   (use \"git add <file>...\" to update what will be committed)"
    echo "#   (use \"git checkout -- <file>...\" to discard changes in working directory)"
    echo "#"
    echo "#       modified:   A"
    echo "#"
    echo "# Untracked files:"
    echo "#   (use \"git add <file>...\" to include in what will be committed)"
    echo "#"
    echo "#       C"
    echo "+-----------------------------------------------------------------------------+"
    echo
    echo "However, the 'git checkout' in file mode is a command that cannot be recovered"
    echo "from—the changes which are discarded most probably cannot be recovered. Perhaps"
    echo "you should run 'git stash save -p \"description\"' instead, and select the"
    echo "changes you no longer want to be stashed instead of zapping them."

    run_cmd "git status"
}

committed() {
    echo
    echo
    echo "Do you have uncommitted stuff in your working directory?"
    echo
    echo "So you have committed. However, before we go about fixing or removing whatever"
    echo "is wrong, you should first ensure that any uncommitted changes are safe, by"
    echo "either committing them ('git commit') or by stashing them"
    echo "('git stash save \"message\"') or getting rid of them."
    echo
    echo "'git status' will help you understand whether your working directory is clean"
    echo "or not. It should report nothing for perfect safety (\"Untracked files\" only"
    echo "are sometimes safe.)"
    echo
    echo "  1) No, I have no changes/working directory is clean"
    echo "  2) Yes, I have bad changes/working directory is dirty: discard it"
    echo "  3) Yes, I have good changes/working directory is dirty: save it"
    echo "Choice: "

    read choice

    case $choice in
        1)
            committed_really
            ;;
        2)
            uncommitted_everything
            ;;
        3)
            uncommitted_commit
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            committed
    esac
}

committed_really() {
    echo
    echo
    echo "Have you pushed?"
    echo
    echo "So you have committed, the question is now whether you have made your changes"
    echo "(or at least the changes you are interesting in "fixing") publicly available or"
    echo "not. Publishing history is a seminal event."
    echo
    echo "If you are dealing with commits someone else made, then this question covers"
    echo "whether they have pushed, and since you have their commits, the answer is"
    echo "almost certainly \"yes\"."
    echo
    echo "Please note in any and all events, the recipes provided here will typically"
    echo "(only one exception which will self-notify) only modify the current branch you"
    echo "are on. Specifically any tags or branches involving the commit you are changing"
    echo "or a child of that commit will not be modified. You must deal with those"
    echo "separately. Look at 'gitk --all --date-order' to help visualize everything what"
    echo "other git references might need to be updated."
    echo
    echo "Also note that these commands will fix up the referenced commits in your"
    echo "repository. There will be reflog'd and dangling commits holding the state you"
    echo "just corrected. This is normally a good thing and it will eventually go away by"
    echo "itself, but if for some reason you want to cut your seat belts, you can expire"
    echo "the reflog now and garbage collect with immediate pruning."
    echo
    echo "  1) Yes, pushes were made"
    echo "  2) No pushes"
    echo "Choice: "

    read choice

    case $choice in
        1)
            pushed
            ;;
        2)
            unpushed
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            committed_really
    esac
}

unpushed() {
    echo
    echo
    echo "Do you want to discard all unpushed changes on this branch?"
    echo
    echo "There is a shortcut in case you want to discard all changes made on this branch"
    echo "since you have last pushed or in any event, to make your local branch identical"
    echo "to \"upstream\". Upstream, for local tracking branches, is the place you get"
    echo "history from when you 'git pull': typically for master it might be origin/master."
    echo "There is a variant of this option which lets you make your local branch"
    echo "identical to some other branch or ref."
    echo
    echo "  1) Yes, I want to discard all unpushed changes"
    echo "  2) Yes, and I want to make my branch identical to some non-upstream ref"
    echo "  3) No, I want to fix some unpushed changes"
    echo "Choice: "

    read choice

    case $choice in
        1)
            discard_all_unpushed
            ;;
        2)
            replace_all_unpushed
            ;;
        3)
            fix_unpushed
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            unpushed
    esac
}

committed_really() {
    echo
    echo
    echo "Discarding all local commits on this branch"
    echo
    echo "In order to discard all local commits on this branch, to make the local branch"
    echo "identical to the \"upstream\" of this branch, simply run 'git reset --hard @{u}'"
    
    run_cmd "git reset --hard @{u}"
}

replace_all_unpushed() {
    echo
    echo
    echo "Replacing all branch history/contents"
    echo
    echo "If instead of discarding all local commits, you can make your branch identical"
    echo "to some other branch, tag, ref, or SHA that exists on your system."
    echo
    echo "The first thing you need to do is identify the SHA or ref of the good state of"
    echo "your branch. You can do this by looking at the output of"
    echo "'git branch -a; git tag', 'git log --all' or, my preference, you can look"
    echo "graphically at 'gitk --all --date-order'"
    echo
    echo "Once you have found the correct state of your branch, you can get to that state"
    echo "by running:"
    echo
    echo "+----------------------+"
    echo "| git reset --hard REF |"
    echo "+----------------------+"
    echo
    echo "Obviously replace \"REF\" with the reference or SHA you want to get back to."
    echo
    echo "Enter a REF: "

    read ref

    run_cmd "git reset --hard $ref"
}

fix_unpushed() {
    echo
    echo
    echo "Is the commit you want to fix the most recent?"
    echo
    echo "While the techniques mentioned to deal with deeper commits will work on the"
    echo "most recent, there are some convenient shortcuts you can take with the most"
    echo "recent commit."
    echo
    echo "  1) Yes, I want to change the most recent commit"
    echo "  2) Yes, I want to discard the most recent commit(s)"
    echo "  3) Yes, I want to undo the last git operation(s) affecting the HEAD/tip of my"
    echo "     branch (most useful for rebase, reset, or --amend)"
    echo "  4) No, I want to change an older commit"
    echo "  5) No, I want to restore a older version of/deleted file as a new commit"
    echo "  6) Either way, I want to move a commit from one branch to another"
    echo "Choice: "

    read choice

    case $choice in
        1)
            change_last
            ;;
        2)
            remove_last
            ;;
        3)
            undo_tip
            ;;
        4)
            change_deep
            ;;
        5)
            pushed_restore_file
            ;;
        6)
            move_commit
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            fix_unpushed
    esac
}

change_last() {
    echo
    echo
    echo "Do you want to remove or change the commit message/contents of the last commit?"
    echo
    echo "  1) I want to remove the last commit"
    echo "  2) I want to update the author/message/contents of the last commit"
    echo "  3) I want to reorder, split, merge, or significantly rework the last commit(s)"

    read choice

    case $choice in
        1)
            remove_last
            ;;
        2)
            update_last
            ;;
        3)
            rework_last
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            change_last
    esac
}

remove_last() {
    echo
    echo
    echo "Removing the last commit"
    echo
    echo "To remove the last commit from git, you can simply run 'git reset --hard HEAD^'"
    echo "If you are removing multiple commits from the top, you can run"
    echo "'git reset --hard HEAD~2' to remove the last two commits. You can increase the"
    echo "number to remove even more commits."
    echo
    echo "If you want to \"uncommit\" the commits, but keep the changes around for"
    echo "reworking, remove the \"--hard\": 'git reset HEAD^' which will evict the commits"
    echo "from the branch and from the index, but leave the working tree around."
    echo
    echo "If you want to save the commits on a new branch name, then run"
    echo "'git branch newbranchname' before doing the git reset."
    echo

    local cmd
    local default

    default=1
    echo "How many commits do you want to remove? [1]: "
    read answer
    local commit_count=${answer:-$default}

    if [ $commit_count -eq 1 ]
    then
        cmd="HEAD^"
    else
        cmd="HEAD~$commit_count"
    fi

    default=n
    echo "Do you want to leave the changes for reworking? [n]: "
    read answer
    local leave_changes=${answer:-$default}

    if [ "${leave_changes,,}" == "y" ]
    then
        default=n
        echo "Do you want to save the changes to a new branch? [n]: "
        read answer
        local response=${answer:-$default}
        if [ "${response,,}" == "y" ]
        then
            echo "  Branch name: "
            read branch
            cmd="git branch $branch; git reset --hard $cmd"
        else
            cmd="git reset $cmd"
        fi
    else
        cmd="git reset --hard $cmd"
    fi

    run_cmd "$cmd"
}

rework_last() {
    echo
    echo
    echo "Reworking the last commit"
    echo
    echo "WARNING: These techniques should only be used for non-merge commits. If you"
    echo "have a merge commit, you are better off deleting the merge and recreating it."
    echo
    echo "If you want to perform significant work on the last commit, you can simply"
    echo "'git reset HEAD^'. This will undo the commit (peel it off) and restore the"
    echo "index to the state it was in before that commit, leaving the working directory"
    echo "with the changes uncommitted, and you can fix whatever you need to fix and try"
    echo "again."
    echo
    echo "You can do this with multiple (non-merge) commits in a row (using \"HEAD^^\" or"
    echo "similar techniques), but then of course you lose the separation between the"
    echo "commits and are left with an undifferentiated working directory. If you are"
    echo "trying to squash all of the commits together, or rework which bits are in which"
    echo "commits, this may be what you want."
    echo
    echo "If you want to reorder commits, split them, merge them together, or otherwise"
    echo "perfect the commits, you should explore Post Production Editing Using Git."
    echo
    echo "How many commits do you want to rework: "

    read commits;
    local cmd="git reset HEAD"
    local i=0
    while [ $i -lt $commits ]
    do
        cmd="$cmd^"
        $i=$[$i+1]
    done

    run_cmd "$cmd"
}

move_commit() {
    echo
    echo
    echo "Moving a commit from one branch to another"
    echo
    echo "So, you have a commit which is in the wrong place and you want to move it from"
    echo "one branch to another. In order to do this, you will need to know the SHA of"
    echo "the first and last commit (in a continuous series of commits) you want to move"
    echo "(those values are the same if you are moving only one commit), the name of the"
    echo "branch you are moving the commit from, and the name of the branch you are moving"
    echo 'the commit to. In the example below, I will name these four values $first, '
    echo '$last, $source, and $destination (respectively). Additionally, you will need to'
    echo "use a nonce branch as a placeholder. I will call the nonce branch \"nonce\" in "
    echo "the following example. However, you may use any branch name that is not currently"
    echo "in use. You can delete it immediately after you are done."
    echo
    echo "+-------------------------------------------------+"
    echo "| git branch nonce $last                          |"
    echo "| git rebase -p --onto $destination $first^ nonce |"
    echo "+-------------------------------------------------+"
    echo
    echo 'Remember that when you substitute $first in the command above, leave the "^"'
    echo 'alone, it is literal.'
    echo
    echo "Use 'gitk --all --date-order' to check to make sure the move looks correct"
    echo "(pretending that nonce is the destination branch). Please check very carefully"
    echo "if you were trying to move a merge, it may have been recreated improperly. If"
    echo "you don't like the result, you may delete the nonce branch"
    echo "('git branch -D nonce') and try again."
    echo
    echo "However, if everything looks good, we can move the actual destination branch"
    echo "pointer to where nonce is:"
    echo
    echo "+---------------------------+"
    echo "| git checkout $destination |"
    echo "| git reset --hard nonce    |"
    echo "| git branch -d nonce       |"
    echo "+---------------------------+"
    echo
    echo "If you double-checked with 'gitk --all --date-order', you would see that the"
    echo "destination branch looks correct. However, the commits are still on the source"
    echo "branch as well. We can get rid of those now:"
    echo
    echo "+--------------------------------------------+"
    echo '| git rebase -p --onto $first^ $last $source |'
    echo "+--------------------------------------------+"
    echo
    echo "Using 'gitk --all --date-order' one last time, you should now see that the"
    echo "commits on the source branch have gone away. You have successfully moved the"
    echo "commits. Please check very carefully if merges occurred after the commits which"
    echo "were deleted. They may have been recreated incorrectly. If so you can either"
    echo "undo the delete or try to delete the bad merge and try to recreate it manually,"
    echo "or create a fake (--ours) merge from the same SHA so that git is aware that the"
    echo "merge occurred."

    #TODO: figure out how to make the automation magics
    #TODO: work the link into this
}

update_last() {
    echo
    echo
    echo "Updating the last commit's contents or commit message"
    echo
    echo "To update the last commit's contents, author, or commit message for a commit"
    echo "which you have not pushed or otherwise published, first you need to get the"
    echo "index into the correct state you wish the commit to reflect. If you are changing"
    echo "the commit message only, you need do nothing. If you are changing the file"
    echo "contents, typically you would modify the working directory and use 'git add' as"
    echo "normal."
    echo
    echo "Note if you wish to restore a file to a known good state, you can use: "
    echo "'git checkout GOODSHA -- path/to/filename'."
    echo
    echo "Once the index is in the correct state, then you can run 'git commit --amend'"
    echo 'to update the last commit. Yes, you can use "-a" if you want to avoid the'
    echo "git add suggested in the previous paragraph. You can also use --author to change"
    echo "the author information."
    echo
    echo 'If you want to do something more sophisticated that what "--amend" allows,'
    echo 'please investigate reworking the last commit.'

    #TODO: figure out how to make the automation magics
    #TODO: work the link into this
}

change_deep() {
    echo
    echo
    echo 'Do you want to remove an entire commit?'
    echo
    echo '  1) Yes, I want to remove an entire commit'
    echo '  2) No, I want to change an older commit'
    echo 'Choice: '

    read choice

    case $choice in
        1)
            remove_deep
            ;;
        2)
            modify_deep
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            change_deep
    esac
}

remove_deep() {
    echo "Removing an entire commit"
    echo
    echo 'I call this operation "cherry-pit" since it is the inverse of a "cherry-pick".'
    echo 'You must first identify the SHA of the commit you wish to remove. You can do this'
    echo "using 'gitk --date-order' or using 'git log --graph --decorate --oneline' You are"
    echo "looking for the 40 character SHA-1 hash ID (or the 7 character abbreviation). Yes,"
    echo 'if you know the "^" or "~" shortcuts you may use those.'
    echo
    echo "+-------------------------------+"
    echo "| git rebase -p --onto SHA^ SHA |"
    echo "+-------------------------------+"
    echo
    echo 'Obviously replace "SHA" with the reference you want to get rid of. The "^" in that'
    echo 'command is literal.'
    echo
    echo 'However, please be warned. If some of the commits between SHA and the tip of your'
    echo "branch are merge commits, it is possible that 'git rebase -p' will be unable to"
    echo "properly recreate them. Please inspect the resulting merge topology"
    echo "'gitk --date-order HEAD ORIG_HEAD' and contents to ensure that git did want you"
    echo "wanted. If it did not, there is not really any automated recourse. You can reset"
    echo "back to the commit before the SHA you want to get rid of, and then cherry-pick"
    echo 'the normal commits and manually re-merge the "bad" merges. Or you can just suffer'
    echo "with the inappropriate topology (perhaps creating fake merges"
    echo "'git merge --ours otherbranch' so that subsequent development work on those"
    echo 'branches will be properly merged in with the correct merge-base).'
    echo 
    echo "What is the SHA you want to remove?: "

    read sha
    run_cmd "git rebase -p --onto $sha^ $sha"
}

modify_deep() {
    echo "Do you want to remove/change/rename a particular file/directory from all commits"
    echo "during all of git's history"
    echo
    echo "  1) Yes please, I want to make a change involving all git commits"
    echo "  2) No, I only want to change a single commit"

    read choice

    case $choice in
        1)
            modify_deep
            ;;
        2)
            change_single_deep
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            modify_deep
    esac
}

bulk_rewrite_history() {
    echo "Changing all commits during all of git's history"
    echo
    echo "You have not pushed but still somehow want to change all commits in all of git's"
    echo "history? Strange."
    echo
    echo "  1) Not just removing data (eg. re-arranging directory structure for all commits),"
    echo "     or just wanting to use standard tools"
    echo "  2) Want to only remove unwanted data (big files, private data, etc) and am"
    echo "     willing to use a third party tool to do the job more quickly"
    echo "Choice: "

    read choice

    case $choice in
        1)
            filterbranch
            ;;
        2)
            bfg
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            bulk_rewrite_history
    esac
}

bfg() {
    echo "Use The BFG to remove unwanted data, like big files or passwords, from Git"
    echo "repository history."
    echo
    echo "Disclaimer, the author of this document has not qualified this tool (including"
    echo "for safety or usability for any purpose), but recognizes the need which this tool"
    echo "fills for large repositories."
    echo
    echo "The BFG is a simpler, faster alternative to git filter-branch, specifically"
    echo "designed for cleansing bad data out of your Git repository history - it operates"
    echo "over all branches and tags in your project to purge data you don't want retained"
    echo "anywhere. Some examples:"
    echo
    echo "Remove all blobs bigger than 1 megabyte (to make your repo take up less space):"
    echo
    echo "+-------------------------------------------------+"
    echo "| $ bfg --strip-blobs-bigger-than 1M  my-repo.git |"
    echo "+-------------------------------------------------+"
    echo
    echo "Replace all passwords listed in a file with ***REMOVED*** wherever they occur in"
    echo "your repository :"
    echo
    echo "+-------------------------------------------------+"
    echo "| $ bfg --replace-text passwords.txt  my-repo.git |"
    echo "+-------------------------------------------------+"
    echo
    echo "Best of luck to you"
}

filterbranch() {
    echo "Arbitrarily changing all commits during all of git's history"
    echo
    echo "'git filter-branch' is a powerful, complex command that allows you to perform"
    echo "arbitary scriptable operations on all commits in git repository history. This"
    echo "flexibility can make it quite slow on big repos, and makes using the command"
    echo "quite difficult, so I will simply point you at the manual page and remind you"
    echo 'that best practice is to always use "--tag-name-filter cat -- --all" unless you'
    echo "are really sure you know what you are doing."

    run_cmd "git filter-branch --help"
}

change_single_deep() {
    echo "Is a merge commit involved?"
    echo
    echo "If the commit you are trying to change is a merge commit, or if there is a merge"
    echo "commit between the commit you are trying to change and the tip of the branch you"
    echo "are on, then you need to do some special handling of the situation."
    echo
    echo "  1) Yes, a merge commit is involved"
    echo "  2) No, only simple commits"
    echo "Choice: "

    read choice

    case $choice in
        1)
            change_single_deep_merge
            ;;
        2)
            change_single_deep_simple
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            change_single_deep
    esac
}

change_single_deep_simple() {
    echo "Changing a single commit involving only simple commits"
    echo
    echo "You must first identify the SHA of the commit you wish to remove. You can do this"
    echo "using 'gitk --date-order' or using 'git log --graph --decorate --oneline' You are"
    echo "looking for the 40 character SHA-1 hash ID (or the 7 character abbreviation). Yes,"
    echo 'if you know the "^" or "~" shortcuts you may use those.'
    echo
    echo "+--------------------+"
    echo "| git rebase -i SHA^ |"
    echo "+--------------------+"
    echo
    echo 'Obviously replace "SHA" with the reference you want to get rid of. The "^" in'
    echo "that command is literal."
    echo
    echo "You will be dumped in an editor with a bunch of lines starting with pick. The"
    echo "oldest commit, the one you are probably interested in changing, is first. You"
    echo 'will want to change the "pick" to "reword" or "edit", or perhaps even "squash"'
    echo "depending on what your goal is. Please read the manual page for more information."
    echo "A document on Post-Production Editing using Git goes through much of the major"
    echo "uses of git rebase is some detail. The use case is a little different, but the"
    echo "fundamental techniques are not."
    echo
    echo 'When using "edit", to change contents or author, when you are dumped into the'
    echo 'shell to make your change, well make your change, 'git add' as normal, and then run'
    echo "'git commit --amend' (including changing the author information with --author)."
    echo "When you are satisfied, you should run 'git rebase --continue'"
    echo
    echo "What is the SHA you want to replace?: "

    read sha
    run_cmd "git rebase -i $sha^"
}

change_single_deep_merge() {
    echo Changing a single commit involving a merge
    echo 
    echo Oh dear. This is going to get a little complicated. It should all work out,
    echo though. You will need to use a nonce branch as a placeholder. I will call the
    echo 'nonce branch "nonce" in the following example. However, you may use any branch'
    echo name that is not currently in use. You can delete it immediately after you are done.
    echo 
    echo '1) Identify the SHA of the commit you wish to modify.'
    echo 
    echo '    You can do this using "gitk --date-order" or using'
    echo '    "git log --graph --decorate --oneline" You are looking for the 40 character'
    echo '    SHA-1 hash ID (or the 7 character abbreviation). Yes, if you know the "^" or'
    echo '    "~" shortcuts you may use those.'
    echo 
    echo '2) Remember the name of the branch you are currently on'
    echo 
    echo '    The line with a star on it in the git branch output is the branch you are'
    echo '    currently on. I will use "$master" in this example, but substitute your'
    echo '    branch name for "$master" in the following commands.'
    echo 
    echo '3) Create and checkout a nonce branch pointing at that commit.'
    echo 
    echo '    +---------------------------+' 
    echo '    | git checkout -b nonce SHA |'
    echo '    +---------------------------+'
    echo
    echo '    Obviously replace "SHA" with the reference you want to modify.'
    echo 
    echo '4) Modify the commit'
    echo 
    echo '    You need to get the index into the correct state you wish the commit to'
    echo '    reflect. If you are changing the commit message only, you need do nothing.'
    echo '    If you are changing the file contents, typically you would modify the'
    echo '    working directory and use git add as normal.'
    echo 
    echo '    Note if you wish to restore a file to a known good state, you can use'
    echo '    "git checkout GOODSHA -- path/to/filename".'
    echo 
    echo '    Once the index is in the correct state, then you can run '
    echo '    "git commit --amend" to update the last commit. Yes, you can use "-a" if'
    echo '    you want to avoid the "git add" suggested in the previous paragraph.'
    echo 
    echo '    If the commit you are updating is a merge commit, ensure that the log'
    echo '    message reflects that.'
    echo 
    echo '5) Put the remaining commits after the new one you just created'
    echo 
    echo '    Remembering to substitute the correct branch name for $master'
    echo 
    echo '    +-----------------------------------------------------------+' 
    echo '    | git rebase -p --onto $(git rev-parse nonce) HEAD^ $master |'
    echo '    +-----------------------------------------------------------+' 
    echo
    echo '6) Validate that the topology is still good'
    echo 
    echo '    If some of the commits after the commit you changed are merge commits,'
    echo '    please be warned. It is possible that "git rebase -p" will be unable to'
    echo '    properly recreate them. Please inspect the resulting merge topology'
    echo '    "gitk --date-order HEAD ORIG_HEAD" to ensure that git did want you wanted.'
    echo '    If it did not, there is not really any automated recourse. You can reset'
    echo '    back to the commit before the SHA you want to get rid of, and then'
    echo '    cherry-pick the normal commits and manually re-merge the "bad" merges. Or'
    echo '    you can just suffer with the inappropriate topology (perhaps creating fake'
    echo '    merges "git merge --ours otherbranch" so that subsequent development work'
    echo '    on those branches will be properly merged in with the correct merge-base).'
    echo 
    echo ' 7) Delete the nonce branch'
    echo 
    echo "You don't need it. It was just there to communicate an SHA between two steps in"
    echo 'the above process. "git branch -d nonce"'
}

pushed() {
    echo 'Can you make a positive commit to fix the problem and what is the fix class?'
    echo
    echo 'Rewriting public history is a bad idea. It requires everyone else to do special'
    echo 'things and you must publicly announce your failure. Ideally you will create'
    echo 'either a commit to just fix the problem, or a new "git revert" commit to create'
    echo 'a new commit which undoes what the commit target of the revert did.'
    echo
    echo '  1) Yes, I can make a new commit but the bad commit trashed a particular file'
    echo '     in error (among other good things I want to keep)'
    echo '  2) Yes, I can make a new commit and the bad commit is a merge commit I want to'
    echo '     totally remove'
    echo '  3) Yes, I can make a new commit but the bad commit is a simple commit I want'
    echo '     to totally remove'
    echo '  4) Yes, I can make a new commit and the bad commit has an error in it I want'
    echo '     to fix'
    echo '  5) Yes, I can make a new commit but history is all messed up and I have a'
    echo '     replacement branch'
    echo '  6) No, I am a bad person and must rewrite published history'

    read choice

    case $choice in
        1)
            pushed_restore_file
            ;;
        2)
            pushed_new_merge
            ;;
        3)
            pushed_new_simple
            ;;
        4)
            pushed_fixit
            ;;
        5)
            branch_overlay_merge
            ;;
        6)
            pushed_old
            ;;
        *)
            echo "$choice is not a valid option"
            echo
            echo
            pushed
    esac
}

pushed_fixit() {
    echo 'Making a new commit to fix an old commit'
    echo
    echo 'If the problem in the old commit is just something was done incorrectly, go'
    echo 'ahead and make a normal commit to fix the problem. Feel free to reference the'
    echo 'old commit SHA in the commit message, and if you are into the blame-based'
    echo 'development methodology, make fun of the person who made the mistake (or someone'
    echo 'who recently left if you made the mistake).'
}

pushed_restore_file() {
    echo 'Making a new commit to restore a file deleted earlier'
    echo
    echo 'The file may have been deleted or every change to that file in that commit (and'
    echo 'all commits since then) should be destroyed. If so, you can simply checkout a'
    echo 'version of the file which you know is good.'
    echo
    echo 'You must first identify the SHA of the commit containing the good version of the'
    echo 'file. You can do this using "gitk --date-order" or using'
    echo '"git log --graph --decorate --oneline" or perhaps "git log --oneline -- filename"'
    echo 'You are looking for the 40 character SHA-1 hash ID (or the 7 character'
    echo 'abbreviation). Yes, if you know the "^" or "~" shortcuts you may use those.'
    echo
    echo '+--------------------------------------+'
    echo '| git checkout SHA -- path/to/filename |'
    echo '+--------------------------------------+'
    echo
    echo 'Obviously replace "SHA" with the reference that is good. You can then add and'
    echo 'commit as normal to fix the problem.'
}

pushed_new_simple() {
    echo 'Reverting an old simple pushed commit'
    echo
    echo 'To create an positive commit to remove the effects of a simple (non-merge)'
    echo 'commit, you must first identify the SHA of the commit you want to revert. You'
    echo 'can do this using "gitk --date-order" or using'
    echo '"git log --graph --decorate --oneline" You are looking for the 40 character SHA-1'
    echo 'hash ID (or the 7 character abbreviation). Yes, if you know the "^" or "~"'
    echo 'shortcuts you may use those.'
    echo
    echo '+----------------+'
    echo '| git revert SHA |'
    echo '+----------------+'
    echo
    echo 'Obviously replace "SHA" with the reference you want to revert. If you want to'
    echo 'revert multiple SHA, you may specify a range or a list of SHA.'
}

pushed_new_merge() {
    echo 'Reverting a merge commit'
    echo
    echo 'Oh dear. This is going to get complicated.'
    echo
    echo 'To create an positive commit to remove the effects of a merge commit, you must'
    echo 'first identify the SHA of the commit you want to revert. You can do this using'
    echo '"gitk --date-order" or using "git log --graph --decorate --oneline" You are'
    echo 'looking for the 40 character SHA-1 hash ID (or the 7 character abbreviation).'
    echo 'Yes, if you know the "^" or "~" shortcuts you may use those.'
    echo
    echo 'Undoing the file modifications caused by the merge is about as simple as you'
    echo 'might hope. "git revert -m 1 SHA". (Obviously replace "SHA" with the reference'
    echo 'you want to revert; "-m 1" will revert changes from all but the first parent,'
    echo 'which is almost always what you want.) Unfortunately, this is just the tip of'
    echo 'the iceberg. The problem is, what happens months later, long after you have'
    echo 'exiled this problem from your memory, when you try again to merge these branches'
    echo '(or any other branches they have been merged into)? Because git has it tracked'
    echo 'in history that a merge occurred, it is not going to attempt to remerge what it'
    echo 'has already merged, and even worse, if you merge from the branch where you did'
    echo 'the revert you will undo the changes on the branch where they were made.'
    echo '(Imagine you revert a premature merge of a long-lived topic branch into master'
    echo 'and later merge master into the topic branch to get other changes for testing.)'
    echo
    echo 'One option is actually to do this reverse merge immediately, annihilating any'
    echo 'changes before the bad merge, and then to "revert the revert" to restore them.'
    echo 'This leaves the changes removed from the branch you mistakenly merged to, but'
    echo 'present on their original branch, and allows merges in either direction without'
    echo 'loss. This is the simplest option, and in many cases, can be the best.'
    echo
    echo 'A disadvantage of this approach is that "git blame" output is not as useful (all'
    echo 'the changes will be attributed to the revert of the revert) and "git bisect" is'
    echo 'similarly impaired. Another disadvantage is that you must merge all current'
    echo 'changes in the target of the bad merge back into the source; if your development'
    echo 'style is to keep branches clean, this may be undesirable, and if you rebase your'
    echo 'branches (e.g. with "git pull --rebase"), it could cause complications unless you'
    echo 'are careful to use "git rebase -p" to preserve merges.'
    echo
    echo 'In the following example please replace $destination with the name of the branch'
    echo 'that was the destination of the bad merge, $source with the name of the branch'
    echo 'that was the source of the bad merge, and $sha with the SHA-1 hash ID of the bad'
    echo 'merge itself.'
    echo
    echo '+-------------------------------------------------------------+'
    echo '| git checkout $destination                                   |'
    echo '| git revert $sha                                             |'
    echo '| # save the SHA-1 of the revert commit to un-revert it later |'
    echo '| revert=`git rev-parse HEAD`                                 |'
    echo '| git checkout $source                                        |'
    echo '| git merge $destination                                      |'
    echo '| git revert $revert                                          |'
    echo '+-------------------------------------------------------------+'
    echo
    echo 'Another option is to abandon the branch you merged from, recreate it from the'
    echo 'previous merge-base with the commits since then rebased or cherry-picked over,'
    echo 'and use the recreated branch from now on. Then the new branch is unrelated and'
    echo 'will merge properly. Of course, if you have pushed the donor branch you cannot'
    echo 'use the same name (that would be rewriting public history and is bad) so everyone'
    echo 'needs to remember to use the new branch. Hopefully you have something like'
    echo 'gitolite where you can close the old branch name.'
    echo
    echo 'This approach has the advantage that the recreated donor branch will have cleaner'
    echo 'history, but especially if there have been many commits (and especially merges)'
    echo 'to the branch, it can be a lot of work. At this time, I will not walk you through'
    echo 'the process of recreating the donor branch. Given sufficient demand I can try to'
    echo 'add that. However, if you look at howto/revert-a-faulty-merge.txt (also shipped'
    echo 'as part of the git distribution) it will provide more words than you can shake a'
    echo 'stick at.'
}

branch_overlay_merge() {
    echo 'Rewriting an old branch with a new branch with a new commit'
    echo 
    echo 'If the state of a branch is contaminated beyond repair and you have pushed that'
    echo 'branch or otherwise do not want to rewrite the existing history, then you can'
    echo 'make a new commit which overwrites the original branch with the new one and'
    echo 'pretends this was due to a merge. The command is a bit complicated, and will get'
    echo 'rid of all ignored or untracked files in your working directory, so please be'
    echo 'sure you have properly backed up everything.'
    echo
    echo 'In the following example please replace $destination with the name of the branch'
    echo 'whose contents you want to overwrite. $source should be replaced with the name'
    echo 'of the branch whose contents are good.'
    echo
    echo 'You actually are being provided with two methods. The first set is more portable'
    echo 'but generates two commits. The second knows about the current internal files git'
    echo 'uses to do the necessary work in one commit. Only one command is different and a'
    echo 'second command runs at a different time.'
    echo 
    echo '+-----------------------------------------------------------------------+'
    echo '| # Portable method to overwrite one branch with another in two commits |'
    echo '| git clean -dfx                                                        |'
    echo '| git checkout $destination                                             |'
    echo '| git reset --hard $source                                              |'
    echo '| git reset --soft ORIG_HEAD                                            |'
    echo '| git add -fA .                                                         |'
    echo '| git commit -m "Rewrite $destination with $source"                     |'
    echo '| git merge -s ours $source                                             |'
    echo '+-----------------------------------------------------------------------+'
    echo
    echo 'or'
    echo
    echo '+-------------------------------------------------------------------+'
    echo '| # Hacky method to overwrite one branch with another in one commit |'
    echo '| git clean -dfx                                                    |'
    echo '| git checkout $destination                                         |'
    echo '| git reset --hard $source                                          |'
    echo '| git reset --soft ORIG_HEAD                                        |'
    echo '| git add -fA .                                                     |'
    echo '| git rev-parse $source > .git/MERGE_HEAD                           |'
    echo '| git commit -m "Rewrite $destination with $source"                 |'
    echo '+-------------------------------------------------------------------+'
}

pushed_old() {
    echo 'I am a bad person and must rewrite published history'
    echo
    echo 'Hopefully you read the previous reference and fully understand why this is bad'
    echo 'and what you have to tell everyone else to do in order to recover from this'
    echo 'condition. Assuming this, you simply need to go to the parts of this document'
    echo 'which assume that you have not yet pushed and do them as normal. Then you need'
    echo 'to do a "force push" "git push -f" to thrust your updated history upon everyone'
    echo 'else. As you read in the reference, this may be denied by default by your'
    echo 'upstream repository (see "git config receive.denyNonFastForwards", but can be'
    echo 'disabled (temporarily I suggest) if you have access to the server. You then will'
    echo 'need to send mail to everyone who might have pulled the history telling them'
    echo 'that history was rewritten and they need to "git pull --rebase" and do a bit of'
    echo 'history rewriting of their own if they branched or tagged from the now'
    echo 'outdated history.'
    echo
    echo 'Proceed with fixing the old commit. (Press any key)'

    read
    unpushed
}

lostnfound() {
    echo 'I have lost some commits I know I made'
    echo
    echo 'First make sure that it was not on a different branch. Try'
    echo '"git log -Sfoo --all" where "foo" is replaced with something unique in the'
    echo 'commits you made. You can also search with "gitk --all --date-order" to see if'
    echo 'anything looks likely.'
    echo
    echo 'Check your stashes, "git stash list", to see if you might have stashed instead'
    echo 'of committing. You can also visualize what the stashes might be associated with'
    echo 'via:'
    echo
    echo '+-------------------------------------------------------------------+'
    echo "| gitk --all --date-order \$(git stash list | awk -F: '{print \$1};') |"
    echo '+-------------------------------------------------------------------+'
    echo
    echo 'Next, you should probably look in other repositories you have lying around'
    echo 'including ones on other hosts and in testing environments, and in your backups.'
    echo
    echo 'Once you are fully convinced that it is well and truly lost, you can start'
    echo 'looking elsewhere in git. Specifically, you should first look at the reflog'
    echo 'which contains the history of what happened to the tip of your branches for the'
    echo 'past two weeks or so. You can of course say "git log -g" or "git reflog" to view'
    echo 'it, but it may be best visualized with:'
    echo
    echo '+---------------------------------------------------+'
    echo '| gitk --all --date-order $(git reflog --pretty=%H) |'
    echo '+---------------------------------------------------+'
    echo
    echo "Next you can look in git's lost and found. Dangling commits get generated for"
    echo 'many good reasons including resets and rebases. Still those activities might have'
    echo 'mislaid the commits you were interested in. These might be best visualized with'
    echo '"gitk --all --date-order $(git fsck | grep "dangling commit" | awk '"'{print \$3;}')"
    echo
    echo 'The last place you can look is in dangling blobs. These are files which have'
    echo 'been git added but not attached to a commit for some (usually innocuous) reason.'
    echo 'To look at the files, one at a time, run:'
    echo
    echo '+--------------------------------------------------------+'
    echo '| git fsck | grep "dangling blob" | while read x x s; do |'
    echo '|   git show $s | less;                                  |'
    echo '| done                                                   |'
    echo '+--------------------------------------------------------+'
    echo
    echo 'Once you find the changes you are interested in, there are several ways you can'
    echo 'proceed. You can "git reset --hard SHA" your current branch to the history and'
    echo 'current state of that SHA (probably not recommended for stashes), you can'
    echo '"git branch newbranch SHA" to link the old history to a new branch name (also'
    echo 'not recommended for stashes), you can "git stash apply SHA" (for the non-index'
    echo 'commit in a git-stash), you can "git stash merge SHA" or "git cherry-pick SHA"'
    echo '(for either part of a stash or non-stashes), etc.'
}

undo_tip() {
    echo "Undoing the last few git operations affecting HEAD/my branch's tip"

    echo 'Practically every git operation which affects the repository is recorded in the'
    echo '"git reflog". You may then use the reflog to look at the state of the branches'
    echo 'at previous times or even go back to the state of the local branch at the time.'
    echo
    echo 'While this happens for every git command affecting HEAD, it is usually most'
    echo 'interesting when attempting to recover from a bad rebase or reset or an'
    echo "--amend'ed commit. There are better ways (listed by the rest of this document)"
    echo 'from recovering from the more mundane reflog updates.'
    echo
    echo 'The first thing you need to do is identify the SHA of the good state of your'
    echo 'branch. You can do this by looking at the output of "git log -g" or, my'
    echo 'preference, you can look graphically at'
    echo '"gitk --all --date-order $(git log -g --pretty=%H)"'
    echo
    echo 'Once you have found the correct state of your branch, you can get back to that'
    echo 'state by running'
    echo
    echo '+----------------------+'
    echo '| git reset --hard SHA |'
    echo '+----------------------+'
    echo
    echo 'You could also link that old state to a new branch name using'
    echo
    echo '+-------------------------------+'
    echo '| git checkout -b newbranch SHA |'
    echo '+-------------------------------+'
    echo
    echo 'Obviously replace "SHA" in both commands with the reference you want to get back'
    echo 'to.'
    echo
    echo 'Note that any other commits you have performed since you did that "bad" operation'
    echo 'will then be lost. You could "git cherry-pick" or "git rebase -p --onto" those'
    echo 'other commits over.'
}

badmerge() {
    echo
    echo
    echo "Recovering from a borked/stupid/moribund merge"
    echo
    echo "So, you were in the middle of a merge, have encountered one or more conflicts, and"
    echo "you have now decided that it was a big mistake and want to get out of the merge."
    echo
    echo "The fastest way out of the merge is 'git merge --abort'"

    run_cmd "git merge --abort"
}

badrebase() {
    echo
    echo
    echo "Recovering from a borked/stupid/moribund rebase"
    echo
    echo "So, you were in the middle of a rebase, have encountered one or more conflicts,"
    echo "and you have now decided that it was a big mistake and want to get out of the merge."
    echo
    echo  "The fastest way out of the merge is git rebase --abort"
    echo

    run_cmd "git rebase --abort"
}

start
